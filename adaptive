local type=type;local setmetatable=setmetatable;local tostring=tostring;local a=math.pi;local b=math.min;local c=math.max;local d=math.deg;local e=math.rad;local f=math.sqrt;local g=math.sin;local h=math.cos;local i=math.atan;local j=math.acos;local k=math.fmod;local l={}l.__index=l;function Vector3(m,n,o)if type(m)~="number"then m=0.0 end;if type(n)~="number"then n=0.0 end;if type(o)~="number"then o=0.0 end;m=m or 0.0;n=n or 0.0;o=o or 0.0;return setmetatable({x=m,y=n,z=o},l)end;function l.__eq(p,q)return p.x==q.x and p.y==q.y and p.z==q.z end;function l.__unm(p)return Vector3(-p.x,-p.y,-p.z)end;function l.__add(p,q)local r=type(p)local s=type(q)if r=="table"and s=="table"then return Vector3(p.x+q.x,p.y+q.y,p.z+q.z)elseif r=="table"and s=="number"then return Vector3(p.x+q,p.y+q,p.z+q)elseif r=="number"and s=="table"then return Vector3(p+q.x,p+q.y,p+q.z)end end;function l.__sub(p,q)local r=type(p)local s=type(q)if r=="table"and s=="table"then return Vector3(p.x-q.x,p.y-q.y,p.z-q.z)elseif r=="table"and s=="number"then return Vector3(p.x-q,p.y-q,p.z-q)elseif r=="number"and s=="table"then return Vector3(p-q.x,p-q.y,p-q.z)end end;function l.__mul(p,q)local r=type(p)local s=type(q)if r=="table"and s=="table"then return Vector3(p.x*q.x,p.y*q.y,p.z*q.z)elseif r=="table"and s=="number"then return Vector3(p.x*q,p.y*q,p.z*q)elseif r=="number"and s=="table"then return Vector3(p*q.x,p*q.y,p*q.z)end end;function l.__div(p,q)local r=type(p)local s=type(q)if r=="table"and s=="table"then return Vector3(p.x/q.x,p.y/q.y,p.z/q.z)elseif r=="table"and s=="number"then return Vector3(p.x/q,p.y/q,p.z/q)elseif r=="number"and s=="table"then return Vector3(p/q.x,p/q.y,p/q.z)end end;function l.__tostring(p)return"( "..p.x..", "..p.y..", "..p.z.." )"end;function l:clear()self.x=0.0;self.y=0.0;self.z=0.0 end;function l:unpack()return self.x,self.y,self.z end;function l:length_2d_sqr()return self.x*self.x+self.y*self.y end;function l:length_sqr()return self.x*self.x+self.y*self.y+self.z*self.z end;function l:length_2d()return f(self:length_2d_sqr())end;function l:length()return f(self:length_sqr())end;function l:dot(t)return self.x*t.x+self.y*t.y+self.z*t.z end;function l:cross(t)return Vector3(self.y*t.z-self.z*t.y,self.z*t.x-self.x*t.z,self.x*t.y-self.y*t.x)end;function l:dist_to(t)return(t-self):length()end;function l:is_zero(u)u=u or 0.001;if self.x<u and self.x>-u and self.y<u and self.y>-u and self.z<u and self.z>-u then return true end;return false end;function l:normalize()local v=self:length()if v<=0.0 then return 0.0 end;self.x=self.x/v;self.y=self.y/v;self.z=self.z/v;return v end;function l:normalize_no_len()local v=self:length()if v<=0.0 then return end;self.x=self.x/v;self.y=self.y/v;self.z=self.z/v end;function l:normalized()local v=self:length()if v<=0.0 then return Vector3()end;return Vector3(self.x/v,self.y/v,self.z/v)end;function clamp(w,x,y)if w<x then return x elseif w>y then return y end;return w end;function normalize_angle(z)local A;local B;B=tostring(z)if B=="nan"or B=="inf"then return 0.0 end;if z>=-180.0 and z<=180.0 then return z end;A=k(k(z+360.0,360.0),360.0)if A>180.0 then A=A-360.0 end;return A end;function vector_to_angle(C)local v;local D;local E;v=C:length()if v>0.0 then D=d(i(-C.z,v))E=d(i(C.y,C.x))else if C.x>0.0 then D=270.0 else D=90.0 end;E=0.0 end;return Vector3(D,E,0.0)end;function angle_forward(z)local F=g(e(z.x))local G=h(e(z.x))local H=g(e(z.y))local I=h(e(z.y))return Vector3(G*I,G*H,-F)end;function angle_right(z)local F=g(e(z.x))local G=h(e(z.x))local H=g(e(z.y))local I=h(e(z.y))local J=g(e(z.z))local K=h(e(z.z))return Vector3(-1.0*J*F*I+-1.0*K*-H,-1.0*J*F*H+-1.0*K*I,-1.0*J*G)end;function angle_up(z)local F=g(e(z.x))local G=h(e(z.x))local H=g(e(z.y))local I=h(e(z.y))local J=g(e(z.z))local K=h(e(z.z))return Vector3(K*F*I+-J*-H,K*F*H+-J*I,K*G)end;function get_FOV(L,M,N)local O;local P;local Q;local R;P=angle_forward(L)Q=(N-M):normalized()R=j(P:dot(Q)/Q:length())return c(0.0,d(R))end
local ui_set, ui_get, ui_ref, ui_callback, ui_visibile = ui.set, ui.get, ui.reference, ui.set_callback
local ui_new_checkbox, ui_new_color_picker, ui_new_slider =  ui.new_checkbox, ui.new_color_picker, ui.new_slider
local entity_get_player_name, entity_get_bounding_box, entity_is_alive, entity_get_prop, entity_get_local_player, entity_get_player_weapon, entity_get_players = entity.get_player_name, entity.get_bounding_box, entity.is_alive, entity.get_prop, entity.get_local_player, entity.get_player_weapon, entity.get_players
local client_set_event_callback, client_unset_event_callback, client_log, client_color_log = client.set_event_callback, client.unset_event_callback, client.log, client.color_log
local string_format, math_floor, bit_band = string.format, math.floor, bit.band
local renderer_text, renderer_measure_text = renderer.text, renderer.measure_text

local menu = {
    target_selection = ui.reference("RAGE", "Aimbot", "Target selection"),
    target_hitbox = ui.reference("RAGE", "Aimbot", "Target hitbox"),
    multi_point = {ui.reference("RAGE", "Aimbot", "Multi-point")},
    multi_pointscale = ui.reference("RAGE", "Aimbot", "Multi-point scale"),
    prefer_safe_points = ui.reference("RAGE", "Aimbot", "Prefer safe point"),
    force_safe_point = ui.reference("RAGE", "Aimbot", "Force safe point"),
    automatic_fire = ui.reference("RAGE", "Aimbot", "Automatic fire"),
    automatic_penetration = ui.reference("RAGE", "Aimbot", "Automatic penetration"),
    slient_aim = ui.reference("RAGE", "Aimbot", "Silent aim"),
    minimum_hit_chance = ui.reference("RAGE", "Aimbot", "Minimum hit chance"),
    minimum_damage = ui.reference("RAGE", "Aimbot", "Minimum damage"),
    automatic_scope = ui.reference("RAGE", "Aimbot", "Automatic scope"),
    reduce_aim_step = ui.reference("RAGE", "Aimbot", "Reduce aim step"),
    max_fov = ui.reference("RAGE", "Aimbot", "Maximum FOV"),
    log_misses_due_to_spread = ui.reference("RAGE", "Aimbot", "Log misses due to spread"),
    remove_recoil = ui.reference("RAGE", "Other", "Remove recoil"),
    delay_shot = ui.reference("RAGE", "Other", "Delay shot"),
    quick_stop = {ui.reference("RAGE", "Other", "Quick stop")},
    quick_stop_options = ui.reference("RAGE", "Other", "Quick stop options"),
    quick_peek_assist = {ui.reference("RAGE", "Other", "Quick peek assist")},
    quick_peek_assist_color = ui.reference("RAGE", "Other", "Quick peek assist display"),
    resolver = ui.reference("RAGE", "Other", "Anti-aim correction"),
    resolver_override = ui.reference("RAGE", "Other", "Anti-aim correction override"),
    prefer_body_aim = ui.reference("RAGE", "Other", "Prefer body aim"),
    prefer_body_aim_options = ui.reference("RAGE", "Other", "Prefer body aim disablers"),
    force_body_aim = ui.reference("RAGE", "Other", "Force body aim"),
    force_body_aim_on_peek = ui.reference("RAGE", "Other", "Force body aim on peek"),
    double_tap = {ui.reference("RAGE", "Other", "Double tap")},
    double_tap_mode = ui.reference("RAGE", "Other", "Double tap mode"),
    double_tap_hit_chance = ui.reference("RAGE", "Other", "Double tap hit chance"),
    double_tap_fake_lag_limit = ui.reference("RAGE", "Other", "Double tap fake lag limit"),
    double_tap_quick_stop = ui.reference("RAGE", "Other", "Double tap quick stop"),
    accuracy_boost = ui.reference("RAGE", "Other", "Accuracy boost"),
    duck_peek_assist = ui.reference("RAGE", "Other", "Duck peek assist"),
    on_shot_antiaim = {ui.reference("AA", "Other", "On shot anti-aim")},
    low_fps_mitigations = ui.reference("RAGE", "Aimbot", "Low FPS mitigations")
}       

--ye
local lp = entity.get_local_player
local weapon_names = {}
local config = {}
local label = {}

local current_config = "Global"
local last_weapon = current_config
local time_of_last_change = 0

--Weapon things
local weapon_groups = {}

local add_weapon = function(namename, ...)
    table.insert(weapon_groups, {
        name = namename,
        weapons = {...}
    })
end

add_weapon("Global", nil)
add_weapon("Auto", 38, 11)
add_weapon("AWP", 9)
add_weapon("Scout", 40)
add_weapon("Revolver", 64)
add_weapon("Deagle", 1)
add_weapon("Pistol", 4, 63, 36, 3, 2, 30, 61, 32)
add_weapon("SMG", 17, 34, 33, 24, 26, 19)
add_weapon("Rifle & Heavy", 13, 10, 7, 16, 60, 39, 8, 14, 28)
add_weapon("Taser", 31)

--Get names
for i=1, #weapon_groups do
    table.insert(weapon_names, weapon_groups[i].name)
end

--UI
local master = ui.new_checkbox("RAGE", "Other", "Matrix adaptive weapon")
local active_config = ui.new_combobox("RAGE", "Other", "Manage configs", weapon_names)

--Config stuff
for i=1, #weapon_groups do
    local weapon_group = weapon_groups[i]
    local name = weapon_group.name

    config[i] = {
        name = name,
        enable = ui.new_checkbox("RAGE", "Other", "Enable: " .. name, false),
        target_selection = ui.new_combobox("RAGE", "Aimbot", "Target selection \n" .. name, {"Cycle", "Cycle (2x)", "Near crosshair", "Highest damage", "Lowest ping", "Best K/D ratio", "Best hit chance"}),
        target_hitbox = ui.new_multiselect("RAGE", "Aimbot", "Target hitbox \n" .. name, {"Head", "Chest", "Stomach", "Arms", "Legs", "Feet"}),
        multi_point_hitbox = ui.new_multiselect("RAGE", "Aimbot", "Multi-point hitbox \n" .. name, {"Head", "Chest", "Stomach", "Arms", "Legs", "Feet"}),
        multi_point_scale = ui.new_slider("RAGE", "Aimbot", "Multi-point scale \n" .. name, 24, 100, 70),
        prefer_safe_point = ui.new_checkbox("RAGE", "Aimbot", "Prefer safe point \n" .. name),
        hit_chance = ui.new_slider("RAGE", "Aimbot", "Minimum hit chance \n" .. name, 0, 100, 50, true, "%"),
        damage = ui.new_slider("RAGE", "Aimbot", "Minimum damage \n" .. name, 0, 126, 25, true),
        accuracy_boost = ui.new_combobox("RAGE", "Other", "Accuracy boost \n" .. name, {"Off", "Low", "Medium", "High", "Maximum"}),
        delay_shot = ui.new_checkbox("RAGE", "Other", "Delay shot \n" .. name),
        quick_stop = ui.new_checkbox("RAGE", "Other", "Quick stop \n" .. name),
        quick_stop_options = ui.new_multiselect("RAGE", "Other", "Quick stop options \n" .. name, {"Early", "Slow motion", "Duck", "Fake duck", "Move between shots", "Ignore molotov"}),
        prefer_body_aim = ui.new_checkbox("RAGE", "Other", "Prefer body aim \n" .. name),
        prefer_body_aim_options = ui.new_multiselect("RAGE", "Other", "Prefer body aim options\n" .. name, {"Low inaccuracy", "Target shot fired", "Target resolved", "Safe point headshot", "Low damage"}),
        force_body_aim_on_peek = ui.new_checkbox("RAGE", "Other", "Force body aim on peek \n" .. name),
        double_tap = ui.new_checkbox("RAGE", "Other", "Double tap \n" .. name),
        double_tap_hit_chance = ui.new_slider("RAGE", "Aimbot", "double tap hit chance \n" .. name, 0, 100, 50, true, "%"),
        double_tap_quick_stop = ui.new_multiselect("RAGE", "Aimbot", "double tap quick stop \n" .. name, {"Slow motion", "Duck", "Move between shots"}),
        extra = ui.new_multiselect("RAGE", "Aimbot", "Extra options: " .. name, {"Noscope distance", "Noscope minimum hit chance", "Prefer safe point on DT", "Hitchance in air", "Override minimum damage", "Override hitboxes", "Visible minimum damage"}),
        dt_prefer_safe_point = ui.new_checkbox("RAGE", "Aimbot", "Prefer safe point on DT\n" .. name),
        hitchance_air = ui.new_slider("RAGE", "Aimbot", "Hitchance in air\n" .. name, 0, 100, 50, true, "%", 1),
        noscope_distance = ui.new_slider("RAGE", "Aimbot", "Noscope distance", 0, 120, 40, true, "ft"),
        noscope_hit_chance = ui.new_slider("RAGE", "Aimbot", "Noscope hit chance: " .. name, 0, 100, 40, true, "%"),
        override_damage = ui.new_slider("RAGE", "Aimbot", "Override minimum damage: " .. name, 0, 126, 40, true, ""),
        override_key = ui.new_hotkey("RAGE", "Aimbot", "Override key: " .. name, true),
        override_hitboxes = ui.new_multiselect("RAGE", "Aimbot", "Override hitboxes: " .. name, {"Head", "Chest", "Stomach", "Arms", "Legs", "Feet"}),  
        override_hitboxes_key = ui.new_hotkey("RAGE", "Aimbot", "Override hitboxes key: " .. name, true),
        --ns
        last_noscope_state = false,
        ns_restored = true,

        --Md
        last_md_hotkey_state = false,
        md_restored = true,

        --hb
        last_hb_hotkey_state = false,
        hb_restored = true,

        --hc
        last_in_air_state = false,
        hc_restored = true
    }
end

for i=1, #config do
    local weapon_group = weapon_groups[i]
    local name = weapon_group.name
    label[i] = {
        acitve_fig = ui.new_label("RAGE", "Other", "Current config: " .. name),
    }
end

local includes = function(table, key)
    for i=1, #table do
        if table[i] == key then
            return true, i
        end
    end
    return false, nil
end

local set_vis = function(state, ...)
    local table = {...}
    for i=1, #table do
        ui.set_visible(table[i], state)
    end
end

local units_to_meters = function(units)
    return math.floor((units * 0.0254) + 0.5)
end

local units_to_feet = function(units)
    return math.floor((units_to_meters(units) * 3.281) + 0.5)
end


local get_nearest = function()
    local me = Vector3(entity.get_prop(entity.get_local_player(), "m_vecOrigin"))
    
    local nearest_distance
    local nearest_entity

    for _, player in ipairs(entity.get_players(true)) do
        local target = Vector3(entity.get_prop(player, "m_vecOrigin"))
        local _distance = me:dist_to(target)

        if (nearest_distance == nil or _distance < nearest_distance) then
            nearest_entity = player
            nearest_distance = _distance
        end  
    end

    if (nearest_distance ~= nil and nearest_entity ~= nil) then
        return ({ target = nearest_entity, distance = units_to_feet(nearest_distance) })
    end
end 

local get_weapon_index = function(ent)
    local wpn = entity.get_player_weapon(ent)
    return (bit.band(65535, entity.get_prop(wpn, "m_iItemDefinitionIndex")))
end

local script = {
    active
}

local on_run_command = function(c)
    local me = entity_get_local_player()

    if (not entity_is_alive(me)) then
        return
    end

    for i=1, #config do
        local fig = config[i]
        if(fig.noscope_distance) then
            data = get_nearest()

            if (data == nil) then
                return
            end

            local dist = ui.get(fig.noscope_distance)

            if (data ~= nil) then
                local r, g, b

                if (data.distance <= dist) then
                    r, g, b = 30, 220, 30
                else
                    r, g, b = 220, 30, 30
                end

                --client.color_log(r, g, b, string_format("%s is the nearest entity, approx. %sft away", entity_get_player_name(data.target), data.distance))
            end

            local wpn_idx = get_weapon_index(me)
            local is_allowed_gun

            if (wpn_idx ~= 11 and wpn_idx ~= 38) then
                is_allowed_gun = false
            else
                is_allowed_gun = true
            end

            local scoped = entity.get_prop(me, "m_bIsScoped")
            local is_in_range = false

            if (data.distance < ui.get(fig.noscope_distance)) then
                is_in_range = true
            end

            if (is_in_range and is_allowed_gun and scoped == 0) then
                script.active = true
            else
                script.active = false
            end

            ui.set(menu.automatic_scope, not script.active)
        end
    end
end

local on_paint = function()
    if (not script.active) or (data == nil) then
        return
    end

    local sx, sy = client.screen_size()
    local cx, cy = sx/2, sy/2
        renderer.text(cx, cy + 120, 255, 255,255, 255, "cb", 0, "noscopeable")
end

local is_noscoping = function(config)
    if lp() ~= nil and entity.is_alive(lp()) then
        if config == "Auto" or config == "Scout" or config == "AWP" then
            local scoped = entity.get_prop(lp(), "m_bIsScoped")
            return scoped == 0
        end
    end
    return false
end

local backuphitchance = nil
local backuphitchance_check = false

local function get_velocity(ent)
	local vecVelx, vecVely, vecVelz = entity.get_prop(ent, "m_vecVelocity")
	
	if vecVelx == nil and vecVely == nil and vecVelz == nil then
		return 0
	end
	
	return math.sqrt(vecVelx*vecVelx + vecVely*vecVely + vecVelz*vecVelz);
end 

local hitchance = ui.reference("RAGE", "Aimbot", "Minimum hit chance")

local paint_ui = function()
    local master_g = ui.get(master)
    local active_config_g = ui.get(active_config)

    set_vis(master_g, active_config)

    if master_g then
        local weapon = entity.get_player_weapon(lp())
        if weapon ~= nil then
            local item_def_index = entity.get_prop(weapon, "m_iItemDefinitionIndex")
            if item_def_index then
                for i=1, #weapon_groups do
                    local weapon_group = weapon_groups[i]
                    local contains, i2 = includes(weapon_group.weapons, item_def_index)
                    if contains and ui.get(config[i].enable) then
                        current_config = weapon_group.name
                        break
                    else
                        current_config = "Global"
                    end
                end
            end
        else
            current_config = active_config_g
        end
    end

    if last_weapon ~= current_config then
        time_of_last_change = globals.tickcount()
        ui.set(active_config, current_config)
        last_weapon = current_config
    end 

    for i=1, #config do
        local fig = config[i]

        set_vis(master_g and fig.name == active_config_g, fig.enable)

        set_vis(master_g and fig.name == current_config, fig.extra, label[i].acitve_fig)

        local extra_g = ui.get(fig.extra)
        set_vis(master_g and fig.name == current_config and includes(extra_g, "Noscope distance"), fig.noscope_distance)
        set_vis(master_g and fig.name == current_config and includes(extra_g, "Noscope minimum hit chance"), fig.noscope_hit_chance)
        set_vis(master_g and fig.name == current_config and includes(extra_g, "Prefer safe point on DT"), fig.dt_prefer_safe_point)
        set_vis(master_g and fig.name == current_config and includes(extra_g, "Hitchance in air"), fig.hitchance_air)
        set_vis(master_g and fig.name == current_config and includes(extra_g, "Override minimum damage"), fig.override_damage, fig.override_key)
        set_vis(master_g and fig.name == current_config and includes(extra_g, "Override hitboxes"), fig.override_hitboxes, fig.override_hitboxes_key)

        set_vis(false, 
            fig.target_selection,
            fig.target_hitbox,
            fig.target_selection,
            fig.multi_point_hitbox,
            fig.multi_point_scale,
            fig.prefer_safe_point,
            fig.dt_prefer_safe_point,
            fig.hit_chance,
            fig.damage,
            fig.accuracy_boost,
            fig.delay_shot,
            fig.quick_stop,
            fig.quick_stop_options,
            fig.force_body_aim_on_peek,
            fig.double_tap,
            fig.double_tap_hit_chance,
            fig.double_tap_quick_stop,
            fig.prefer_body_aim,
            fig.prefer_body_aim_options
        )

        if master_g then
            --Hide
            if fig.name == "Global" then
                ui.set(fig.enable, true)
                ui.set_visible(fig.enable, false)
            end

            --set figs
            if fig.name == current_config then
                if #ui.get(fig.target_hitbox) == 0 then
                    ui.set(fig.target_hitbox, {"Head"})
                end

                if #ui.get(fig.override_hitboxes) == 0 then
                    ui.set(fig.override_hitboxes, {"Head"})
                end

                local onground = (bit.band(entity.get_prop(entity.get_local_player(), "m_fFlags"), 1) == 1)

                local hc_ovr = includes(extra_g, "Hitchance in air") and (not onground)
                local ns_ovr = includes(extra_g, "Noscope minimum hit chance") and is_noscoping(fig.name)
                local md_ovr = includes(extra_g, "Override minimum damage") and ui.get(fig.override_key)
                local hb_ovr = includes(extra_g, "Override hitboxes") and ui.get(fig.override_hitboxes_key)

                if fig.last_noscope_state ~= ns_ovr then
                    if ns_ovr == false then
                        ui.set(menu.minimum_hit_chance, ui.get(fig.hit_chance))
                        fig.ns_restored = true
                    end
                    fig.last_noscope_state = ns_ovr
                end
                if fig.last_md_hotkey_state ~= md_ovr then
                    if md_ovr == false then
                        ui.set(menu.minimum_damage, ui.get(fig.damage))
                        fig.md_restored = true
                    end
                    fig.last_md_hotkey_state = md_ovr
                end
                if fig.last_hb_hotkey_state ~= hb_ovr then
                    if hb_ovr == false then
                        ui.set(menu.target_hitbox, ui.get(fig.target_hitbox))
                        fig.hb_restored = true
                    end
                    fig.last_hb_hotkey_state = hb_ovr
                end
                if fig.last_in_air_state ~= hc_ovr then
                    if hc_ovr == false then
                        ui.set(menu.minimum_hit_chance, ui.get(fig.hit_chance))
                        fig.hc_restored = true
                    end
                    fig.last_in_air_state = hc_ovr
                end

                local doubletapping = ui.get(menu.double_tap[1]) and ui.get(menu.double_tap[2])
                local custom_psp = ui.get(fig.dt_prefer_safe_point) and doubletapping

                --Update
                if time_of_last_change == globals.tickcount() then
                    ui.set(menu.target_selection, ui.get(fig.target_selection))
                    ui.set(menu.target_hitbox, ui.get(fig.target_hitbox))
                    ui.set(menu.multi_point[1], ui.get(fig.multi_point_hitbox))
                    ui.set(menu.multi_pointscale, ui.get(fig.multi_point_scale))
                    ui.set(menu.prefer_safe_points, ui.get(fig.prefer_safe_point))
                    ui.set(menu.prefer_safe_points, custom_psp and true and ui.get(fig.prefer_safe_point))
                    --ui.set(menu.minimum_hit_chance, ui.get(fig.hit_chance))
                    ui.set(menu.minimum_damage, ui.get(fig.damage))
                    ui.set(menu.accuracy_boost, ui.get(fig.accuracy_boost))
                    ui.set(menu.delay_shot, ui.get(fig.delay_shot))
                    ui.set(menu.quick_stop[1], ui.get(fig.quick_stop))
                    ui.set(menu.quick_stop_options, ui.get(fig.quick_stop_options))
                    ui.set(menu.prefer_body_aim, ui.get(fig.prefer_body_aim))
                    ui.set(menu.prefer_body_aim_options, ui.get(fig.prefer_body_aim_options))
                    ui.set(menu.force_body_aim_on_peek, ui.get(fig.force_body_aim_on_peek))
                    ui.set(menu.double_tap[1], ui.get(fig.double_tap))
                    ui.set(menu.double_tap_hit_chance, ui.get(fig.double_tap_hit_chance))
                    ui.set(menu.double_tap_quick_stop, ui.get(fig.double_tap_quick_stop))
                else --Save
                    ui.set(fig.target_selection, ui.get(menu.target_selection))
                    if hb_ovr then
                        ui.set(menu.target_hitbox, ui.get(fig.override_hitboxes))
                        fig.hb_restored = false
                    elseif fig.hb_restored then
                        ui.set(fig.target_hitbox, ui.get(menu.target_hitbox))
                    end
                    ui.set(fig.multi_point_hitbox, ui.get(menu.multi_point[1]))
                    ui.set(fig.multi_point_scale, ui.get(menu.multi_pointscale))
                    ui.set(fig.prefer_safe_point, ui.get(menu.prefer_safe_points))
                    if ns_ovr then
                        ui.set(menu.minimum_hit_chance, ui.get(fig.noscope_hit_chance))
                        fig.ns_restored = false
                    elseif fig.ns_restored then
                        ui.set(fig.hit_chance, ui.get(menu.minimum_hit_chance))
                    end
                    if md_ovr then
                        ui.set(menu.minimum_damage, ui.get(fig.override_damage))
                        config[i].md_restored = false
                    elseif config[i].md_restored then
                        ui.set(fig.damage, ui.get(menu.minimum_damage))
                    end
                    if hc_ovr then
                        ui.set(menu.minimum_hit_chance, ui.get(fig.hitchance_air))
                        fig.hc_restored = false
                    elseif fig.hc_restored then
                        ui.set(fig.hit_chance, ui.get(menu.minimum_hit_chance))
                    end
                    ui.set(fig.accuracy_boost, ui.get(menu.accuracy_boost))
                    ui.set(fig.delay_shot, ui.get(menu.delay_shot))
                    ui.set(fig.quick_stop, ui.get(menu.quick_stop[1]))
                    ui.set(fig.quick_stop_options, ui.get(menu.quick_stop_options))
                    ui.set(fig.prefer_body_aim, ui.get(menu.prefer_body_aim))
                    ui.set(fig.prefer_body_aim_options, ui.get(menu.prefer_body_aim_options))
                    ui.set(fig.force_body_aim_on_peek, ui.get(menu.force_body_aim_on_peek))
                    ui.set(fig.double_tap, ui.get(menu.double_tap[1]))
                    ui.set(fig.double_tap_hit_chance, ui.get(menu.double_tap_hit_chance))
                    ui.set(fig.double_tap_quick_stop, ui.get(menu.double_tap_quick_stop))
                end
            end
        end
    end 
end

client.set_event_callback("paint_ui", paint_ui, on_paint)
client.set_event_callback("run_command", on_run_command)
