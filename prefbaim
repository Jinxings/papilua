local lp = entity.get_local_player
local doubletap = {ui.reference("RAGE", "Other", "Double tap")}


local function include(table, value) 
    for i=1, #table do
        if table[i] == value then
            return true, i
        end
    end
    return false, nil
end

local function clamp(min, max, current)
    if min < max then
        return math.min(max, math.max(min, current))
    else
        return math.min(min, math.max(max, current))
    end
end

local selects = {
    "Always",
    "Standing",
    "Slow walking",
    "Moving",   
    "Air",
    "Duck",
    "Shooting",
    "Lethal damage",
    "2x Lethal damage",
    --"Peek",
    --"Being peeked",
}

local head_aim = ui.new_multiselect("rage", "other", "Head aim conditions", selects)
local body_aim = ui.new_multiselect("rage", "other", "Body aim conditions", selects)
local safe_point = ui.new_multiselect("rage", "other", "Safe point conditions", selects)

local players = {
    index = {},
    mode = {},
    safe = {},
    old_simulation_time = {},
    last_state = {},
    alpha = {},
}

for i=1, 64 do 
    players.index[i] = i
    players.mode[i] = nil
    players.safe[i] = false
    players.old_simulation_time[i] = 0
    players.last_state[i] = {"", {255, 255, 255, 255}}
    players.alpha[i] = 0
end

local get_velocity = function(index)
    local vec = {entity.get_prop(index, "m_vecVelocity")}
    return math.floor(math.sqrt(vec[1]*vec[1] + vec[2]*vec[2]) + 0.5)
end

local in_air = function(index)
    return bit.band(entity.get_prop(index, "m_fFlags"), 1) == 0
end

local duck_state = function(index)
    return entity.get_prop(index, "m_flDuckAmount") > 0.25
end

local in_onshot = function(index)
    local pitch = entity.get_prop(index, "m_angEyeAngles[0]") or 89
    local weapon = entity.get_player_weapon(index)
    local simulation_time = entity.get_prop(index, "m_flSimulationTime")
    local old_simulation_time = players.old_simulation_time[index]
    if weapon and simulation_time and old_simulation_time then
        local shot_time = entity.get_prop(weapon, "m_fLastShotTime")
        if shot_time then
            return shot_time > old_simulation_time and shot_time <= simulation_time and pitch > -75 and pitch < 75
        end
    end
    return false
end

local get_conditions = function(index)
    local speed = get_velocity(index)
    local air = in_air(index)
    local duck = duck_state(index)
    
    local return_conditions = {}

    if air then
        table.insert(return_conditions, "Air")
    else
        if speed < 5 then
            table.insert(return_conditions, "Standing")
        elseif speed < 125 then
            table.insert(return_conditions, "Slow walking")
        else
            table.insert(return_conditions, "Moving")
        end
    end

    if duck then
        table.insert(return_conditions, "Duck")
    end

    if in_onshot(index) then
        table.insert(return_conditions, "Shooting")
    end

    local health = entity.get_prop(index, "m_iHealth") or 100

    if health <= 40 then
        table.insert(return_conditions, "Lethal damage")
    end

    local dt = ui.get(doubletap[1]) and ui.get(doubletap[2])

    if health <= 60 or dt then
        table.insert(return_conditions, "2x Lethal damage")
    end

    return return_conditions
end

--Do shit
local net_update_start = function()
    if lp() == nil or entity.is_alive(lp()) == false then --No need to run while lp is dead
        return
    end

    local headaim_g = ui.get(head_aim)
    local bodyaim_g = ui.get(body_aim)
    local safe_point_g = ui.get(safe_point)

    client.update_player_list()
    
    for i=1, #players.index do
        local index = players.index[i]
        local valid_player = entity.is_alive(index) and entity.is_enemy(index) and entity.is_dormant(index) == false

        if valid_player then
            local mode = nil --Nil == default, True == prefer, false == head 
            local prefer_safe = false
            local conditions = get_conditions(index)

            for i2=1, #conditions do
                if include(bodyaim_g, conditions[i2]) or include(bodyaim_g, "Always") then
                    mode = true
                    break
                end
            end
        
            for i2=1, #conditions do
                if include(headaim_g, conditions[i2]) or include(headaim_g, "Always") then
                    mode = false
                    break
                end
            end

            for i2=1, #conditions do
                if include(safe_point_g, conditions[i2]) or include(safe_point_g, "Always") then
                    prefer_safe = true
                    break
                end
            end
        
            players.mode[i] = mode
            players.safe[i] = prefer_safe

            plist.set(index, "Override prefer body aim", mode == nil and "-" or (mode and "Force" or "Off"))
            plist.set(index, "Override safe point", prefer_safe and "On" or "-")

        end
    end

    client.update_player_list()
end
client.set_event_callback("net_update_start", net_update_start)

--Update simtime
local net_update_end = function()
    if lp() == nil or entity.is_alive(lp()) == false then --No need to run while lp is dead
        return
    end

    --Loop all players
    for i=1, #players.index do
        local index = i
        local valid_player = entity.is_alive(index) and entity.is_enemy(index) and entity.is_dormant(index) == false
        if valid_player then
            local st = entity.get_prop(index, "m_flSimulationTime")
            if st then
                local old_st = players.old_simulation_time[index]
                if old_st ~= st then
                    players.old_simulation_time[index] = st --Update old st
                end
            end
        end
    end
end
client.set_event_callback("net_update_end", net_update_end)

local indicators = function()
    if lp() == nil or entity.is_alive(lp()) == false then --No need to run while lp is dead
        return
    end

    local inc = (255/0.2)*globals.frametime()

    for i=1, #players.index do
        local index = players.index[i]
        local valid_player = entity.is_alive(index) and entity.is_enemy(index) and entity.is_dormant(index) == false

        if valid_player then
            local bounds = {entity.get_bounding_box(index)}
            if bounds[1] ~= nil then
                if bounds[5] ~= 0 then
                    local color = {220, 220, 220, 255}

                    local text = ''
                    if players.mode[i] then
                        text = 'Body'
                        color = {255, 50, 50, 255}
                    elseif players.mode[i] == false then
                        text = "Head"
                        color = {50, 255, 50, 255}
                    end

                    if players.safe[i] then
                        text = text ~= '' and text .. " + safe" or "safe"
                    end
                    text = string.upper(text)

                    local old_alpha = players.alpha[i]
                    players.alpha[i] = clamp(0, 255, text == '' and old_alpha - inc or old_alpha + inc)

                    if text ~= '' then
                        players.last_state[i][1] = text
                        players.last_state[i][2] = color
                    else
                        text = players.last_state[i][1]
                        color = players.last_state[i][2]
                    end

                    local flags = "b"
                    local text_size = {renderer.measure_text(flags, text)}
                    local box = {bounds[1] + (bounds[3] - bounds[1])/2 - text_size[1]/2, bounds[2] - 25}
                    renderer.text(box[1], box[2], color[1], color[2], color[3], old_alpha, flags, 0, text)
                end
            end
        end
    end
end
client.set_event_callback("paint", indicators)
