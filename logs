local logs = ui.new_checkbox("lua", "a", "Logs")
local log_type = ui.new_multiselect("lua", "a", "Output type", {"Console", "Screen"})
local hit_label = ui.new_label("lua", "a", "Hit color")
local hit_color = ui.new_color_picker("lua", "a", "Hit color picker", 0, 255, 0, 255)
local miss_label = ui.new_label("lua", "a", "Miss color")
local miss_color = ui.new_color_picker("lua", "a", "Miss color picker", 255, 0, 0, 255)

local function include(table, key)
    for i=1, #table do
        if table[i] == key then
            return true, i
        end
    end
    return false, nil
end

local function clamp(min, max, value)
    if min < max then
        return math.max(min, math.min(max, value))
    else
        return math.max(max, math.min(min, value))
    end
end

local custom_logs = {
    color = {},
    text = {},
    x = {},
    alpha = {},
    timer = {},
    removal = {},
}

local function add_custom_log(text, color)
    table.insert(custom_logs.color, color)
    table.insert(custom_logs.text, text)
    table.insert(custom_logs.x, -400)
    table.insert(custom_logs.alpha, 0)
    table.insert(custom_logs.timer, globals.realtime() + 7)
    table.insert(custom_logs.removal, false)
end
    
local ids = {
    id = {},
    index = {},
    target = {},

    --Aim fire
    pred_hc = {},
    pred_hb = {},
    pred_dmg = {},
    boosted = {},
    hp = {},
    interp = {},
    extrap = {},
    teleport = {},
    health_before = {},

    --If hit or miss
    hit = {},
    real_hc = {},
    real_hb = {},
    real_damage = {}, --or invalid if shot was missed
    health = {},
    miss_reason = {}, --or invalid if shot was hit
}

local hitgroup_names = {'generic', 'head', 'chest', 'stomach', 'left arm', 'right arm', 'left leg', 'right leg', 'neck', '?', 'gear'}

local function add(e)
    table.insert(ids.id, e.id)
    table.insert(ids.index, e.target)
    table.insert(ids.target, entity.get_player_name(e.target))
    table.insert(ids.pred_hc, e.hit_chance)
    table.insert(ids.pred_hb, hitgroup_names[e.hitgroup + 1] or "?")
    table.insert(ids.pred_dmg, e.damage)
    table.insert(ids.boosted, e.boosted)
    table.insert(ids.hp, e.high_priority)
    table.insert(ids.interp, e.interpolated)
    table.insert(ids.extrap, e.extrapolated)
    table.insert(ids.teleport, e.teleported)
    table.insert(ids.health_before, entity.get_prop(e.target, 'm_iHealth'))
    table.insert(ids.hit, nil)
    table.insert(ids.real_hc, nil)
    table.insert(ids.real_hb, nil)
    table.insert(ids.real_damage, nil)
    table.insert(ids.health, nil)
    table.insert(ids.miss_reason, nil)
end

local function remove(i)
    local sub_tables = {
        ids.id,
        ids.index,
        ids.target,
        ids.pred_hc,
        ids.pred_hb,
        ids.pred_dmg,
        ids.boosted,
        ids.hp,
        ids.interp,
        ids.extrap,
        ids.teleport,
        ids.health_before,
        ids.hit,
        ids.real_hc,
        ids.real_hb,
        ids.real_damage,
        ids.health,
        ids.miss_reason,
    }

    for i2=1, #sub_tables do
        table.remove(sub_tables[i2], i)
    end
end

local function aim_fire(e)
    add(e)
end

local total_hits = 1
local total_miss = 0

local function aim_hit(e)
    total_hits = total_hits + 1

    local contains, i = include(ids.id, e.id)
    if contains then
        ids.hit[i] = true
        ids.real_hc[i] = e.hit_chance
        ids.real_hb[i] = hitgroup_names[e.hitgroup + 1] or "?"
        ids.real_damage[i] = e.damage
        ids.health[i] = entity.get_prop(e.target, 'm_iHealth')
        ids.miss_reason[i] = "invalid"
    end
end

local function aim_miss(e)
    total_miss = total_miss + 1

    local contains, i = include(ids.id, e.id)
    if contains then
        ids.hit[i] = false
        ids.real_hc[i] = e.hit_chance
        ids.real_hb[i] = hitgroup_names[e.hitgroup + 1] or "?"
        ids.real_damage[i] = "invalid"
        ids.health[i] = entity.get_prop(e.target, 'm_iHealth')
        ids.miss_reason[i] = e.reason ~= "?" and e.reason or "resolver/unknown error"
    end
end

local function logging_print()
    if ui.get(logs) == false or verified_user == false then
        for i=1, #ids.id do
            remove(i)
        end
        return
    end

    for i=1, #ids.id do
        local id = ids.id[i]
        local index = ids.index[i]
        local target = ids.target[i]
        local pred_hc = ids.pred_hc[i]
        local pred_hb = ids.pred_hb[i]
        local pred_dmg = ids.pred_dmg[i]
        local boosted = ids.boosted[i]
        local hp = ids.hp[i]
        local interp = ids.interp[i]
        local extrap = ids.extrap[i]
        local tele = ids.teleport[i]
        local health_b4 = ids.health_before[i]

        local hit = ids.hit[i]
        if hit ~= nil then
            local real_hc = ids.real_hc[i]
            local real_hb = ids.real_hb[i]
            local real_damage = ids.real_damage[i]
            local health = ids.health[i]
            local miss_reason = ids.miss_reason[i]

            local flags = ""

            if boosted then
                flags = flags .. "Boosted, "
            end

            if hp then
                flags = flags .. "High priority, "
            end

            if interp then
                flags = flags .. "Interpolated, "
            end

            if extrap then
                flags = flags .. "Extrapolated, "
            end

            if tele then
                flags = flags .. "Breaking LC, "
            end

            if (health or 0) <= 0 then 
                flags = flags .. "Dead, "
            end

            if flags ~= "" then
                flags = ", Flags: " .. string.sub(flags, 1, flags:len() - 2)
            end

            local hit_color_g = {ui.get(hit_color)}
            local miss_color_g = {ui.get(miss_color)}


            if include(ui.get(log_type), "Console") then
                if hit then
                    local text = string.format("[%d/%d] Hit %s in the %s for %d (%d health remaining, health before: %d) [Predicted hc: %d, Predicted hb: %s, Predicted dmg: %d%s]", total_hits, total_hits + total_miss, target, real_hb, real_damage, health, health_b4, pred_hc, pred_hb, pred_dmg, flags)
                    client.color_log(hit_color_g[1], hit_color_g[2], hit_color_g[3], text)
                else
                    local text = string.format("[%d/%d] Missed %s due to %s [Predicted hc: %d, Predicted hb: %s, Predicted dmg: %d%s]", total_miss, total_hits + total_miss, target, miss_reason, pred_hc, pred_hb, pred_dmg, flags)
                    client.color_log(miss_color_g[1], miss_color_g[2], miss_color_g[3], text)
                end
            end

            if include(ui.get(log_type), "Screen") then
                if hit then
                    local text = string.format("Hit %s in the %s for %d (%d health remaining, health before: %d) [Predicted hc: %d, Predicted hb: %s, Predicted dmg: %d%s]", target, real_hb, real_damage, health, health_b4, pred_hc, pred_hb, pred_dmg, flags)
                    add_custom_log(text, hit_color_g)
                else
                    local text = string.format("Missed %s due to %s [Predicted hc: %d, Predicted hb: %s, Predicted dmg: %d%s]", target, miss_reason, pred_hc, pred_hb, pred_dmg, flags)
                    add_custom_log(text, miss_color_g)
                end
            end
            remove(i)
        end
    end
end

local function draw_custom_logs()
    local offset = 10

    for i=1, #custom_logs.removal do
        if custom_logs.removal[i] and custom_logs.alpha[i] == 0 then
            table.remove(custom_logs.color, i)
            table.remove(custom_logs.text, i)
            table.remove(custom_logs.x, i)
            table.remove(custom_logs.alpha, i)
            table.remove(custom_logs.timer, i)
            table.remove(custom_logs.removal, i)
        end
    end

    for i=1, #custom_logs.color do
        local removal_g = not custom_logs.removal[i]
        local alpha_g = custom_logs.alpha[i]
        local x_g = custom_logs.x[i]
        local text_g = custom_logs.text[i]
        local color_g = custom_logs.color[i]

        --Fade in/out alpha
        local inc = (255/0.5)*globals.frametime()
        custom_logs.alpha[i] = clamp(0, 255, removal_g and alpha_g + inc or alpha_g - inc*2)

        --Fade in/out x
        local inc = (250/0.25)*globals.frametime()
        custom_logs.x[i] = clamp(-1000, 10, removal_g and x_g + inc or x_g - inc)

        custom_logs.removal[i] = custom_logs.timer[i] < globals.realtime()

        --MAKE CIRCLE TO INDICATOR HOW MUCH TIME IS LEFT POGGERS?
        local timeleft = clamp(0, 1, (custom_logs.timer[i] + 0.1 - globals.realtime())/7)

        local size = {renderer.measure_text("", text_g)}    
        renderer.rectangle(x_g - 4, offset - 4, size[1] + 24, size[2] + 8, 25, 25, 25, alpha_g)
        renderer.rectangle(x_g - 4, offset - 4, 3, size[2] + 8, color_g[1], color_g[2], color_g[3], alpha_g)
        renderer.circle_outline(x_g + 7, offset + 6, 50, 50, 50, clamp(0, 255, alpha_g), 6, 90, 1, 3)
        renderer.circle_outline(x_g + 7, offset + 6, color_g[1], color_g[2], color_g[3], clamp(0, color_g[4], alpha_g), 6, 90, timeleft, 3)
        renderer.text(x_g + 16, offset, color_g[1], color_g[2], color_g[3], alpha_g, "", 0, text_g)

        offset = offset + 25
    end
end

--Callbacks
local function set_callbacks(event, ...)
    local items = {...}
    for i=1, #items do
        client.set_event_callback(event, items[i])
    end
end

set_callbacks("aim_fire", aim_fire)
set_callbacks("aim_hit", aim_hit)
set_callbacks("aim_miss", aim_miss)
set_callbacks("paint_ui", draw_custom_logs, logging_print)
